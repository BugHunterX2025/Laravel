----------------------------------------------------Laravel---------------------------------------------------------
// What is Laravel And Why Laravel ?
===> Laravel is a free, open-source PHP web framework, created by Taylor Otwell and intended for
the development of web applications following the model–view–controller (MVC) architectural pattern.
Laravel is a PHP framework that provides a robust set of tools for building web applications. It is
known for its simplicity, flexibility, and scalability.

// What is framework ?
===> A framework is a pre-built set of tools and libraries that can be used to build web
applications. It provides a structure and a set of pre-built functions that can be used to
build web applications.

// What is MVC ?
===> MVC stands for Model-View-Controller. It is a software architectural pattern that separates an
application into three interconnected components. The Model represents the data, the View
represents the user interface, and the Controller handles the business logic.

// Laravel Use
===> Laravel is used for building web applications, APIs, and microservices. It is a popular
choice among developers due to its ease of use, flexibility, and scalability.

// Laravel Features
===> Laravel has a lot of features that make it a popular choice among developers. Some of the
key features of Laravel include:
1.  **MVC Architecture**: Laravel follows the Model-View-Controller (MVC)
architecture, which separates the application logic into three interconnected components.
2.  **Routing**: Laravel provides a powerful routing system that allows you to define routes
for your application.
3.  **Eloquent ORM**: Laravel comes with a powerful Object-Relational Mapping (ORM
system called Eloquent, which provides a simple and elegant way to interact with your database.
4.  **Blade Templating Engine**: Laravel provides a powerful templating engine called Blade,
which allows you to write clean, readable, and maintainable templates for your application.
5.  **Authentication and Authorization**: Laravel provides a robust authentication and
authorization system that allows you to manage user sessions, authentication, and authorization.
6.  **Caching**: Laravel provides a powerful caching system that allows you to cache
your application's data and improve performance.
7.  **Queueing**: Laravel provides a powerful queueing system that allows you to run
background jobs asynchronously.

// Laravel Installation
===> Laravel Xampp Mini Requement ==>

1.  **PHP 7.4 or higher**: Laravel requires PHP 7.4 or
2.  **Composer**: Composer is a dependency manager for PHP that allows you to manage
dependencies for your project.
3.  **Node.js**: Node.js is a JavaScript runtime environment that allows you to run
JavaScript code on the server-side.
4.  **Git**: Git is a version control system that allows you to manage different
versions of your code.

===> To install Laravel, you can use the Composer package manager. Here are the steps to install
Laravel:
1.  **Install Composer**: First, you need to install Composer on your system. You can
download it from the official Composer website.
    step for set env for composer =>
    1.  **Set the environment variable**
    2.  **Copy this path accoring to your computer and past on env variable setting
    C:\Users\user\AppData\Roaming\Composer\vendor\bin
    3.  **Add the path to the system's PATH environment variable**
    4.  **Verify that the Composer installation was successful by running the following command in the
    terminal:*Composer* .
2.  **Create a new project**: Once you have Composer installed, you can create a new
project using the following command: `composer create-project --prefer-dist laravel/laravel project-name`
3.  **Change directory**: Change directory to the project directory using the following
command: `cd project-name`
4.  **Install dependencies**: Install the dependencies required by Laravel using the
following command: `composer install`
5.  **Create a database**: Create a new database for your application using your
database management system (DBMS) of choice.
6.  **Configure database**: Configure the database connection in the `.env` file    
7.  **Run migrations**: Run the database migrations using the following command: `php artisan migrate
8.  **Start the server**: Start the Laravel development server using the following command: `php
artisan serve`
9.  **Access the application**: Access your application in your web browser using the
following URL: `http://localhost:8000`

===> Global Installation of Laravel
1.  **Install Composer**: First, you need to install Composer on your system. You can
download it from the official Composer website.
2.  **Create a new project**: Once you have Composer installed, you can create a new
project using the following command: `composer global require laravel/insaller` then `laravel new example-app` not space between project name.`

===> What is composer ?
Composer is a dependency manager for PHP that allows you to manage dependencies for your project. It is a
package manager that allows you to install, update, and remove packages (libraries) for your project.

// Laravel Project Structure
===> A Laravel project typically consists of the following directories and files:
1.  **app**: This directory contains the application code, including the models, controllers,
and services.
2.  **bootstrap**: This directory contains the bootstrap files, including the
autoload.php file.
3.  **config**: This directory contains the configuration files, including the
database.php file.
4.  **database**: This directory contains the database migration files and the
seeders.
5.  **public**: This directory contains the public assets, including the CSS, JS, and
images.
6.  **resources**: This directory contains the resources, including the views, layouts,
and language files.
7.  **routes**: This directory contains the route files, including the web.php file.
8.  **storage**: This directory contains the storage files, including the logs and
cache.
9.  **tests**: This directory contains the test files, including the unit tests and
integration tests.
10. **vendor**: This directory contains the vendor files, including the Composer
dependencies.
// Laravel Routing
